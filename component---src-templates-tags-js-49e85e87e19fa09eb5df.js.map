{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","to","style","backgroundImage","src","date","timeToRead","title","description","excerpt","toString","replace","tags","kebabCase","pageQuery"],"mappings":"uOA+DeA,UAzDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeJ,EAAN,KAAcG,EAAd,SACE,IAAfA,EAAmB,GAAK,KAE1B,OACE,kBAAC,IAAD,KACE,yBAAKE,UAAU,aACb,4BAAKD,GACJF,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,6BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,OACnC,kBAAC,OAAD,CACEC,GAAIR,EAAKE,OAAOC,KAChBL,UAAU,iBACVW,MAAO,CACLC,gBAAgB,OAAQV,EAAKI,YAAYC,IAAIC,gBAAgBC,MAAMI,IAApD,OAIvB,yBAAKb,UAAU,gBACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,aACbE,EAAKI,YAAYQ,KADpB,QAGA,0BAAMd,UAAU,cACbE,EAAKa,WADR,iBAIF,wBAAIf,UAAU,cACZ,kBAAC,OAAD,CAAMU,GAAIR,EAAKE,OAAOC,MAAOH,EAAKI,YAAYU,QAE9C,2BAAId,EAAKI,YAAYW,YAArB,IAAmCf,EAAKgB,QAAQC,WAAWC,QAAQ,gBAAiB,KACtF,yBAAKpB,UAAU,aACZE,EAAKI,YAAYe,MAChBnB,EAAKI,YAAYe,KAAKpB,KAAI,SAAAN,GAAG,OAC3B,0BAAMQ,IAAKR,GACT,kBAAC,OAAD,CAAMK,UAAU,MAAMU,GAAE,SAAWY,oBAAU3B,GAArB,KAAxB,IAAwDA,aAQxE,8BACE,kBAAC,OAAD,CAAMe,GAAG,SAAT,kBASH,IAAMa,EAAS","file":"component---src-templates-tags-js-49e85e87e19fa09eb5df.js","sourcesContent":["import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport DefaultLayout from '../components/layout';\nimport { kebabCase } from 'lodash';\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${tag}: ${totalCount} post${\n    totalCount === 1 ? '' : 's'}`;\n\n  return (\n    <DefaultLayout>\n      <div className=\"blog-tags\">\n        <h1>{tagHeader}</h1>\n        {edges.map(({ node }) => {\n          return (\n            <article className=\"post\" key={node.fields.slug}>\n              {node.frontmatter.img &&\n                node.frontmatter.img.childImageSharp &&\n                node.frontmatter.img.childImageSharp.fluid && (\n                  <Link\n                    to={node.fields.slug}\n                    className=\"post-thumbnail\"\n                    style={{\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\n                    }}\n                  />\n                )}\n              <div className=\"post-content\">\n                <div className=\"post-headeritem\">\n                  <span className=\"post-date\">\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                </span>\n                  <span className=\"post-words\">\n                    {node.timeToRead} minute read\n                </span>\n                </div>\n                <h2 className=\"post-title\">\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                </h2>\n                  <p>{node.frontmatter.description} {node.excerpt.toString().replace('Generic badge', '')}</p>\n                <div className=\"post-tags\">\n                  {node.frontmatter.tags &&\n                    node.frontmatter.tags.map(tag => (\n                      <span key={tag}>\n                        <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\n                      </span>\n                    ))}\n                </div>\n              </div>\n            </article>\n          )\n        })}\n        <span>\n          <Link to=\"/tags\">← All tags</Link>\n        </span>\n      </div>\n    </DefaultLayout>\n  );\n};\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            img {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  aspectRatio\n                  base64\n                  sizes\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}