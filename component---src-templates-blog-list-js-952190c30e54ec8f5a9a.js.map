{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/pagination.js","webpack://gatsby-starter-blog/./src/templates/blog-list.js"],"names":["currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","className","role","Link","to","rel","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","title","keywords","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","style","backgroundImage","src","ConvertDate","date","timeToRead","description","excerpt","replace","tags","tag","React"],"mappings":"2OA+BA,EA5BkB,SAAC,GAA+B,IAA7BA,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACxBC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAOA,EAAc,GAAGK,WACjEC,EAAW,KAAON,EAAc,GAAGK,WACzC,OACI,uBAAKE,UAAU,aACb,uBAAKA,UAAU,aAAaC,KAAK,cAC/B,uBAAKD,UAAU,eAAf,UACUP,EADV,MAC0BC,GAE1B,4BACIC,GACA,gBAAC,EAAAO,KAAD,CAAMC,GAAIN,EAAUO,IAAI,OAAOJ,UAAU,eAAzC,eAIAJ,GACA,gBAAC,EAAAM,KAAD,CAAMC,GAAIJ,EAAUK,IAAI,OAAOJ,UAAU,eAAzC,mB,UCmDhB,E,6FA/DEK,OAAA,WACE,IAEMC,EAFWC,KAAKC,MAAdC,KAEWC,kBAAkBC,MACrC,EAAkCJ,KAAKC,MAAMI,YAArCnB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SAGJD,EAAc,GAAM,IAAWA,EAAc,GAAGK,YAC/CL,EAAc,GAAGK,WAEnC,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEe,MAXY,OAYZC,SAAU,CAAC,OAAD,6BAEXR,EAAMS,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,2BAAShB,UAAU,OAAOiB,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,OACnC,gBAAC,EAAArB,KAAD,CACEC,GAAIa,EAAKE,OAAOC,KAChBnB,UAAU,iBACVwB,MAAO,CACLC,gBAAgB,OAAQT,EAAKI,YAAYC,IAAIC,gBAAgBC,MAAMG,IAApD,OAIvB,uBAAK1B,UAAU,gBACb,uBAAKA,UAAU,mBACb,wBAAMA,UAAU,cAEZ2B,OAAYX,EAAKI,YAAYQ,MAFjC,QAKA,wBAAM5B,UAAU,cACbgB,EAAKa,WADR,IACwC,GAAnBb,EAAKa,WAAkB,SAAW,YAGzD,sBAAI7B,UAAU,cACZ,gBAAC,EAAAE,KAAD,CAAMC,GAAIa,EAAKE,OAAOC,MAAOH,EAAKI,YAAYP,QAEhD,yBAAIG,EAAKI,YAAYU,YAArB,IAAmCd,EAAKe,QAAQjC,WAAWkC,QAAQ,gBAAiB,KACpF,uBAAKhC,UAAU,aACZgB,EAAKI,YAAYa,MAChBjB,EAAKI,YAAYa,KAAKlB,KAAI,SAAAmB,GAAG,OAC3B,wBAAMjB,IAAKiB,GACT,gBAAC,EAAAhC,KAAD,CAAMF,UAAU,MAAMG,GAAE,SAAW,IAAU+B,GAArB,KAAxB,IAAwDA,aAQxE,gBAAC,EAAD,CAAYzC,YAAaA,EAAaC,SAAUA,M,GA1DhCyC","file":"component---src-templates-blog-list-js-952190c30e54ec8f5a9a.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst PageIndex = ({ currentPage, numPages }) => {\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : '/' + (currentPage - 1).toString()\n    const nextPage = '/' + (currentPage + 1).toString()\n    return (\n        <div className=\"container\">\n          <nav className=\"pagination\" role=\"pagination\">\n            <div className=\"page-number\">\n              Página {currentPage} / {numPages}\n            </div>\n            <div>\n              {!isFirst && (\n                <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                  ← Anterior\n                </Link>\n              )}\n              {!isLast && (\n                <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                  Siguiente →\n                </Link>\n              )}\n            </div>\n          </nav>\n        </div>\n    )\n}\n\nexport default PageIndex","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout, { ConvertDate } from '../components/layout'\nimport Pagination from '../components/pagination'\nimport SEO from '../components/seo'\nimport { kebabCase } from 'lodash';\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = 'Home'\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `azure`, `develop`, `cloud`]}\n        />\n        {posts.map(({ node }) => {\n          return (\n            <article className=\"post\" key={node.fields.slug}>\n              {node.frontmatter.img &&\n                node.frontmatter.img.childImageSharp &&\n                node.frontmatter.img.childImageSharp.fluid && (\n                  <Link\n                    to={node.fields.slug}\n                    className=\"post-thumbnail\"\n                    style={{\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\n                    }}\n                  />\n                )}\n              <div className=\"post-content\">\n                <div className=\"post-headeritem\">\n                  <span className=\"post-date\">\n                    {\n                      ConvertDate(node.frontmatter.date)\n                    }&nbsp;&nbsp;—&nbsp;\n                </span>\n                  <span className=\"post-words\">\n                    {node.timeToRead} {node.timeToRead == 1 ? 'minuto' : 'minutos'}\n                  </span>\n                </div>\n                <h2 className=\"post-title\">\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                </h2>\n                <p>{node.frontmatter.description} {node.excerpt.toString().replace('Generic badge', '')}</p>\n                <div className=\"post-tags\">\n                  {node.frontmatter.tags &&\n                    node.frontmatter.tags.map(tag => (\n                      <span key={tag}>\n                        <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\n                      </span>\n                    ))}\n                </div>\n              </div>\n            </article>\n          )\n        })}\n        <Pagination currentPage={currentPage} numPages={numPages} />\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY, MMM DD\")\n            title\n            description\n            tags\n            img {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  aspectRatio\n                  base64\n                  sizes\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}