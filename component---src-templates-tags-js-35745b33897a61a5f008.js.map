{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","description","keywords","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","to","style","backgroundImage","src","ConvertDate","date","timeToRead","excerpt","toString","replace","tags","kebabCase","pageQuery"],"mappings":"oPAkEeA,UA5DF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeJ,EAAN,KAAcG,EAAd,SACE,IAAfA,EAAmB,GAAK,KAE1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAOD,EAAWE,YAAaN,EAAKO,SAAUP,IACnD,yBAAKQ,UAAU,aACb,4BAAKJ,IAENF,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,6BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,OACnC,kBAAC,OAAD,CACEC,GAAIR,EAAKE,OAAOC,KAChBL,UAAU,iBACVW,MAAO,CACLC,gBAAgB,OAAQV,EAAKI,YAAYC,IAAIC,gBAAgBC,MAAMI,IAApD,OAIvB,yBAAKb,UAAU,gBACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,aAEZc,YAAYZ,EAAKI,YAAYS,MAFjC,QAKA,0BAAMf,UAAU,cACbE,EAAKc,WADR,IACwC,GAAnBd,EAAKc,WAAkB,SAAW,YAGzD,wBAAIhB,UAAU,cACZ,kBAAC,OAAD,CAAMU,GAAIR,EAAKE,OAAOC,MAAOH,EAAKI,YAAYT,QAEhD,2BAAIK,EAAKI,YAAYR,YAArB,IAAmCI,EAAKe,QAAQC,WAAWC,QAAQ,gBAAiB,KACpF,yBAAKnB,UAAU,aACZE,EAAKI,YAAYc,MAChBlB,EAAKI,YAAYc,KAAKnB,KAAI,SAAAT,GAAG,OAC3B,0BAAMW,IAAKX,GACT,kBAAC,OAAD,CAAMQ,UAAU,MAAMU,GAAE,SAAWW,oBAAU7B,GAArB,KAAxB,IAAwDA,aAQxE,yBAAKQ,UAAU,aACb,kBAAC,OAAD,CAAMU,GAAG,QAAQV,UAAU,eAA3B,aAQD,IAAMsB,EAAS","file":"component---src-templates-tags-js-35745b33897a61a5f008.js","sourcesContent":["import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport SEO from '../components/seo'\r\nimport DefaultLayout, { ConvertDate }  from '../components/layout';\r\nimport { kebabCase } from 'lodash';\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagHeader = `${tag}: ${totalCount} post${\r\n    totalCount === 1 ? '' : 's'}`;\r\n\r\n  return (\r\n    <DefaultLayout>\r\n      <SEO title={tagHeader} description={tag} keywords={tag} />\r\n      <div className=\"container\">\r\n        <h1>{tagHeader}</h1>\r\n      </div>\r\n      {edges.map(({ node }) => {\r\n        return (\r\n          <article className=\"post\" key={node.fields.slug}>\r\n            {node.frontmatter.img &&\r\n              node.frontmatter.img.childImageSharp &&\r\n              node.frontmatter.img.childImageSharp.fluid && (\r\n                <Link\r\n                  to={node.fields.slug}\r\n                  className=\"post-thumbnail\"\r\n                  style={{\r\n                    backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\r\n                  }}\r\n                />\r\n              )}\r\n            <div className=\"post-content\">\r\n              <div className=\"post-headeritem\">\r\n                <span className=\"post-date\">\r\n                  {\r\n                    ConvertDate(node.frontmatter.date)\r\n                  }&nbsp;&nbsp;—&nbsp;\r\n                </span>\r\n                <span className=\"post-words\">\r\n                  {node.timeToRead} {node.timeToRead == 1 ? 'minuto' : 'minutos'}\r\n                </span>\r\n              </div>\r\n              <h2 className=\"post-title\">\r\n                <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n              </h2>\r\n              <p>{node.frontmatter.description} {node.excerpt.toString().replace('Generic badge', '')}</p>\r\n              <div className=\"post-tags\">\r\n                {node.frontmatter.tags &&\r\n                  node.frontmatter.tags.map(tag => (\r\n                    <span key={tag}>\r\n                      <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\r\n                    </span>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          </article>\r\n        )\r\n      })}\r\n      <div className=\"container\">\r\n        <Link to=\"/tags\" className=\"newer-posts\">← Tags</Link>\r\n      </div>\r\n    </DefaultLayout>\r\n  );\r\n};\r\n\r\nexport default Tags\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          timeToRead\r\n          frontmatter {\r\n            date(formatString: \"YYYY, MMM DD\")\r\n            title\r\n            description\r\n            tags\r\n            img {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  aspectRatio\r\n                  base64\r\n                  sizes\r\n                  src\r\n                  srcSet\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}