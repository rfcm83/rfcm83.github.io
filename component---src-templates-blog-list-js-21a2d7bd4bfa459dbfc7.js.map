{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/blog-list.js"],"names":["PageIndex","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","className","role","to","rel","BlogIndex","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","title","keywords","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","style","backgroundImage","src","ConvertDate","date","timeToRead","description","excerpt","replace","tags","tag","kebabCase","React","Component","pageQuery"],"mappings":"2NA+BeA,EA5BG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACxBC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAOA,EAAc,GAAGK,WACjEC,EAAW,KAAON,EAAc,GAAGK,WACzC,OACI,yBAAKE,UAAU,aACb,yBAAKA,UAAU,aAAaC,KAAK,cAC/B,yBAAKD,UAAU,eAAf,UACUP,EADV,MAC0BC,GAE1B,8BACIC,GACA,kBAAC,OAAD,CAAMO,GAAIL,EAAUM,IAAI,OAAOH,UAAU,eAAzC,eAIAJ,GACA,kBAAC,OAAD,CAAMM,GAAIH,EAAUI,IAAI,OAAOH,UAAU,eAAzC,mB,4BCbVI,E,gLACJC,OAAA,WAAU,IAGFC,EAFWC,KAAKC,MAAdC,KAEWC,kBAAkBC,MAH9B,EAI2BJ,KAAKC,MAAMI,YAArCnB,EAJD,EAICA,YAAaC,EAJd,EAIcA,SAGJD,EAAc,GAAM,IAAWA,EAAc,GAAGK,YAC/CL,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEe,MAXY,OAYZC,SAAU,CAAC,OAAD,6BAEXR,EAAMS,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACZ,OACE,6BAAShB,UAAU,OAAOiB,IAAKD,EAAKE,OAAOC,MACxCH,EAAKI,YAAYC,KAChBL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,OACnC,kBAAC,OAAD,CACErB,GAAIc,EAAKE,OAAOC,KAChBnB,UAAU,iBACVwB,MAAO,CACLC,gBAAgB,OAAQT,EAAKI,YAAYC,IAAIC,gBAAgBC,MAAMG,IAApD,OAIvB,yBAAK1B,UAAU,gBACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAU,aAEZ2B,YAAYX,EAAKI,YAAYQ,MAFjC,QAKA,0BAAM5B,UAAU,cACbgB,EAAKa,WADR,IACwC,GAAnBb,EAAKa,WAAkB,SAAW,YAGzD,wBAAI7B,UAAU,cACZ,kBAAC,OAAD,CAAME,GAAIc,EAAKE,OAAOC,MAAOH,EAAKI,YAAYP,QAEhD,2BAAIG,EAAKI,YAAYU,YAArB,IAAmCd,EAAKe,QAAQjC,WAAWkC,QAAQ,gBAAiB,KACpF,yBAAKhC,UAAU,aACZgB,EAAKI,YAAYa,MAChBjB,EAAKI,YAAYa,KAAKlB,KAAI,SAAAmB,GAAG,OAC3B,0BAAMjB,IAAKiB,GACT,kBAAC,OAAD,CAAMlC,UAAU,MAAME,GAAE,SAAWiC,oBAAUD,GAArB,KAAxB,IAAwDA,aAQxE,kBAAC,EAAD,CAAYzC,YAAaA,EAAaC,SAAUA,M,GA1DhC0C,IAAMC,WAkEjBC,GAFElC,YAEO","file":"component---src-templates-blog-list-js-21a2d7bd4bfa459dbfc7.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\nconst PageIndex = ({ currentPage, numPages }) => {\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : '/' + (currentPage - 1).toString()\r\n    const nextPage = '/' + (currentPage + 1).toString()\r\n    return (\r\n        <div className=\"container\">\r\n          <nav className=\"pagination\" role=\"pagination\">\r\n            <div className=\"page-number\">\r\n              Página {currentPage} / {numPages}\r\n            </div>\r\n            <div>\r\n              {!isFirst && (\r\n                <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\r\n                  ← Anterior\r\n                </Link>\r\n              )}\r\n              {!isLast && (\r\n                <Link to={nextPage} rel=\"next\" className=\"older-posts\">\r\n                  Siguiente →\r\n                </Link>\r\n              )}\r\n            </div>\r\n          </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageIndex","import React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport DefaultLayout, { ConvertDate } from '../components/layout'\r\nimport Pagination from '../components/pagination'\r\nimport SEO from '../components/seo'\r\nimport { kebabCase } from 'lodash';\r\n\r\nclass BlogIndex extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const siteTitle = 'Home'\r\n    const posts = data.allMarkdownRemark.edges\r\n    const { currentPage, numPages } = this.props.pageContext\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\r\n    const nextPage = (currentPage + 1).toString()\r\n\r\n    return (\r\n      <DefaultLayout>\r\n        <SEO\r\n          title={siteTitle}\r\n          keywords={[`blog`, `azure`, `develop`, `cloud`]}\r\n        />\r\n        {posts.map(({ node }) => {\r\n          return (\r\n            <article className=\"post\" key={node.fields.slug}>\r\n              {node.frontmatter.img &&\r\n                node.frontmatter.img.childImageSharp &&\r\n                node.frontmatter.img.childImageSharp.fluid && (\r\n                  <Link\r\n                    to={node.fields.slug}\r\n                    className=\"post-thumbnail\"\r\n                    style={{\r\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\r\n                    }}\r\n                  />\r\n                )}\r\n              <div className=\"post-content\">\r\n                <div className=\"post-headeritem\">\r\n                  <span className=\"post-date\">\r\n                    {\r\n                      ConvertDate(node.frontmatter.date)\r\n                    }&nbsp;&nbsp;—&nbsp;\r\n                </span>\r\n                  <span className=\"post-words\">\r\n                    {node.timeToRead} {node.timeToRead == 1 ? 'minuto' : 'minutos'}\r\n                  </span>\r\n                </div>\r\n                <h2 className=\"post-title\">\r\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\r\n                </h2>\r\n                <p>{node.frontmatter.description} {node.excerpt.toString().replace('Generic badge', '')}</p>\r\n                <div className=\"post-tags\">\r\n                  {node.frontmatter.tags &&\r\n                    node.frontmatter.tags.map(tag => (\r\n                      <span key={tag}>\r\n                        <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\r\n                      </span>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            </article>\r\n          )\r\n        })}\r\n        <Pagination currentPage={currentPage} numPages={numPages} />\r\n      </DefaultLayout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query blogPageQuery($skip: Int!, $limit: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          timeToRead\r\n          frontmatter {\r\n            date(formatString: \"YYYY, MMM DD\")\r\n            title\r\n            description\r\n            tags\r\n            img {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  aspectRatio\r\n                  base64\r\n                  sizes\r\n                  src\r\n                  srcSet\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}