{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/templates/blog-list.js","webpack:///./src/components/seo.js"],"names":["PageIndex","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","className","role","to","rel","BlogIndex","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","title","keywords","map","node","key","fields","slug","frontmatter","img","childImageSharp","fluid","style","backgroundImage","src","date","timeToRead","description","excerpt","replace","tags","tag","kebabCase","React","Component","pageQuery","SEO","lang","meta","cover","site","metaDescription","siteMetadata","picture","siteUrl","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"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","file":"component---src-templates-blog-list-js-7722d6ca0e57674192ec.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst PageIndex = ({ currentPage, numPages }) => {\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n    return (\n        <div className=\"container\">\n          <nav className=\"pagination\" role=\"pagination\">\n            <div className=\"page-number\">\n              Page {currentPage} of {numPages}\n            </div>\n            <div>\n              {!isFirst && (\n                <Link to={prevPage} rel=\"prev\" className=\"newer-posts\">\n                  ← Previous Page\n                </Link>\n              )}\n              {!isLast && (\n                <Link to={nextPage} rel=\"next\" className=\"older-posts\">\n                  Next Page →\n                </Link>\n              )}\n            </div>\n          </nav>\n        </div>\n    )\n}\n\nexport default PageIndex","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport DefaultLayout from '../components/layout'\nimport Pagination from '../components/pagination'\nimport SEO from '../components/seo'\nimport { kebabCase } from 'lodash';\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = 'Home'\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <DefaultLayout>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `azure`, `develop`, `cloud`]}\n        />\n        {posts.map(({ node }) => {\n          return (\n            <article className=\"post\" key={node.fields.slug}>\n              {node.frontmatter.img &&\n                node.frontmatter.img.childImageSharp &&\n                node.frontmatter.img.childImageSharp.fluid && (\n                  <Link\n                    to={node.fields.slug}\n                    className=\"post-thumbnail\"\n                    style={{\n                      backgroundImage: `url(${node.frontmatter.img.childImageSharp.fluid.src})`,\n                    }}\n                  />\n                )}\n              <div className=\"post-content\">\n                <div className=\"post-headeritem\">\n                  <span className=\"post-date\">\n                    {node.frontmatter.date}&nbsp;&nbsp;—&nbsp;\n                </span>\n                  <span className=\"post-words\">\n                    {node.timeToRead} minute read\n                </span>\n                </div>\n                <h2 className=\"post-title\">\n                  <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n                </h2>\n                <p>{node.frontmatter.description} {node.excerpt.toString().replace('Generic badge', '')}</p>\n                <div className=\"post-tags\">\n                  {node.frontmatter.tags &&\n                    node.frontmatter.tags.map(tag => (\n                      <span key={tag}>\n                        <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>#{tag}</Link>\n                      </span>\n                    ))}\n                </div>\n              </div>\n            </article>\n          )\n        })}\n        <Pagination currentPage={currentPage} numPages={numPages}/>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY, MMM DD\")\n            title\n            description\n            tags\n            img {\n              childImageSharp {\n                fluid(maxWidth: 3720) {\n                  aspectRatio\n                  base64\n                  sizes\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title, keywords, cover }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const picture = site.siteMetadata.siteUrl + (cover || `/cloud.svg`)\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: `twitter:image`,\n          content: picture\n        }\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}